# Copyright (c) 2025 Yifeng Wu
# All rights reserved.
# This file is not licensed for use, modification, or distribution without
# explicit written permission from the copyright holder.

"""Define the database schema."""

from datetime import UTC, datetime
from uuid import uuid4

from sqlalchemy import DateTime, ForeignKey, String, TypeDecorator
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship


class AwareDateTime(TypeDecorator):
    """A SQLAlchemy type that ensures datetimes are always UTC-aware.

    In SQLite for testing, retrieved datetime fields are naive even with timezone=True.
    """

    impl = DateTime(timezone=True)

    cache_ok = True

    def process_result_value(self, value: datetime | None, dialect) -> datetime | None:
        """Process the result value to be UTC-aware if it is a datetime object."""
        if value is not None and value.tzinfo is None:
            return value.replace(tzinfo=UTC)

        return value


class Base(DeclarativeBase):
    """The base for all database models to inherit from."""


class UserORM(Base):
    """The database model for identifying a user."""

    __tablename__ = "user"

    id: Mapped[int] = mapped_column(primary_key=True)

    #: The UID of a user, used externally.
    uid: Mapped[str] = mapped_column(
        String(32), default=lambda: uuid4().hex, unique=True,
    )

    #: The unique user name of a user.
    username: Mapped[str] = mapped_column(String(30), nullable=False, unique=True)

    #: The hashed password associated with the user name.
    password: Mapped[str] = mapped_column(String(128), nullable=False)

    # A user can have many refresh tokens.
    refresh_tokens: Mapped[list["RefreshTokenORM"]] = relationship(
        back_populates="user", cascade="all, delete-orphan",
    )

    # A user can upload many blobs.
    blobs: Mapped[list["BlobORM"]] = relationship(
        back_populates="user", cascade="all, delete-orphan",
    )

    # A user can upload many uploads.
    uploads: Mapped[list["UploadORM"]] = relationship(
        back_populates="user", cascade="all, delete-orphan",
    )


class RefreshTokenORM(Base):
    """The database model for a user's refresh token."""

    __tablename__ = "refresh_token"

    id: Mapped[int] = mapped_column(primary_key=True)

    #: The UID of a refresh token, used externally.
    uid: Mapped[str] = mapped_column(
        String(32), default=lambda: uuid4().hex, unique=True,
    )

    #: The date and time when the token was issued.
    issued_at: Mapped[datetime] = mapped_column(AwareDateTime(), nullable=False)

    #: The date and time when the token was set to expire.
    expire_at: Mapped[datetime] = mapped_column(AwareDateTime(), nullable=False)

    #: A boolean flag for whether this token has been revoked.
    revoked: Mapped[bool] = mapped_column(default=False, nullable=False)

    #: The user agent or device name for this token.
    device: Mapped[str] = mapped_column(String(128), nullable=True)

    #: The IP address where this token was requested.
    ip: Mapped[str] = mapped_column(String(45), nullable=True)

    #: The platform used when requesting this token.
    platform: Mapped[str] = mapped_column(String(32), nullable=True)

    #: The user ID that this refresh token is associated with.
    user_id: Mapped[int] = mapped_column(ForeignKey("user.id"))

    # Each refresh token belongs to one user.
    user: Mapped[UserORM] = relationship(back_populates="refresh_tokens")


class BlobORM(Base):
    """The database model for a blob file uploaded by a user."""

    __tablename__ = "blob"

    id: Mapped[int] = mapped_column(primary_key=True)

    #: The UID of a blob, used externally.
    uid: Mapped[str] = mapped_column(
        String(32), default=lambda: uuid4().hex, unique=True,
    )

    #: The blob key to identify this blob in the blob store.
    blob_key: Mapped[str] = mapped_column(String(256), nullable=False)

    #: The name of this blob file.
    file_name: Mapped[str] = mapped_column(String(256), nullable=False)

    #: The date and time when the blob was created.
    created_at: Mapped[datetime] = mapped_column(AwareDateTime(), nullable=False)

    #: The date and time when the blob is valid through.
    valid_thru: Mapped[datetime] = mapped_column(AwareDateTime(), nullable=False)

    #: The user ID that this blob is associated with.
    user_id: Mapped[int] = mapped_column(ForeignKey("user.id"))

    # Each blob belongs to one user.
    user: Mapped[UserORM] = relationship(back_populates="blobs")

    # A blob can have many compute jobs.
    jobs: Mapped[list["ComputeJobORM"]] = relationship(
        back_populates="blob", cascade="all, delete-orphan",
    )


class UploadORM(Base):
    """The database model for an upload of a blob file."""

    __tablename__ = "upload"

    id: Mapped[int] = mapped_column(primary_key=True)

    #: The UID of this upload generated by the blob service.
    uid: Mapped[str] = mapped_column(String(128), nullable=False)

    #: The blob key to identify the blob in the blob store.
    blob_key: Mapped[str] = mapped_column(String(256), nullable=False)

    #: The date and time when the upload was created.
    created_at: Mapped[datetime] = mapped_column(AwareDateTime(), nullable=False)

    #: The date and time when the upload is valid through.
    valid_thru: Mapped[datetime] = mapped_column(AwareDateTime(), nullable=False)

    #: The user ID that this upload is associated with.
    user_id: Mapped[int] = mapped_column(ForeignKey("user.id"))

    # Each upload belongs to one user.
    user: Mapped[UserORM] = relationship(back_populates="uploads")


class ComputeJobORM(Base):
    """The database model for a compute job."""

    __tablename__ = "compute_job"

    id: Mapped[int] = mapped_column(primary_key=True)

    #: The UID of this job.
    uid: Mapped[str] = mapped_column(
        String(32), default=lambda: uuid4().hex, unique=True,
    )

    #: The date and time when the job was requested.
    requested_at: Mapped[datetime] = mapped_column(AwareDateTime(), nullable=False)

    #: The date and time when the job was completed.
    completed_at: Mapped[datetime] = mapped_column(AwareDateTime(), nullable=True)

    #: The current status of this job.
    status: Mapped[str] = mapped_column(String(8), default="created", nullable=False)

    #: The blob ID that this job is associated with.
    blob_id: Mapped[int] = mapped_column(ForeignKey("blob.id"))

    # Each job belongs to one blob.
    blob: Mapped[BlobORM] = relationship(back_populates="jobs")
